//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConsoleNote_Manager.TestServiceNote_Manager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/TestWCFService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://schemas.datacontract.org/2004/07/TestWCFService")]
    [System.SerializableAttribute()]
    public partial class Note : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TexteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Creation {
            get {
                return this.CreationField;
            }
            set {
                if ((this.CreationField.Equals(value) != true)) {
                    this.CreationField = value;
                    this.RaisePropertyChanged("Creation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Modification {
            get {
                return this.ModificationField;
            }
            set {
                if ((this.ModificationField.Equals(value) != true)) {
                    this.ModificationField = value;
                    this.RaisePropertyChanged("Modification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Texte {
            get {
                return this.TexteField;
            }
            set {
                if ((object.ReferenceEquals(this.TexteField, value) != true)) {
                    this.TexteField = value;
                    this.RaisePropertyChanged("Texte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Titre {
            get {
                return this.TitreField;
            }
            set {
                if ((object.ReferenceEquals(this.TitreField, value) != true)) {
                    this.TitreField = value;
                    this.RaisePropertyChanged("Titre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServiceNote_Manager.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType GetDataUsingDataContract(TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType> GetDataUsingDataContractAsync(TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        int AddUser(string Pseudo, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string Pseudo, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Connection", ReplyAction="http://tempuri.org/IService1/ConnectionResponse")]
        int Connection(string Pseudo, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Connection", ReplyAction="http://tempuri.org/IService1/ConnectionResponse")]
        System.Threading.Tasks.Task<int> ConnectionAsync(string Pseudo, string Pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Disconnection", ReplyAction="http://tempuri.org/IService1/DisconnectionResponse")]
        bool Disconnection(int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Disconnection", ReplyAction="http://tempuri.org/IService1/DisconnectionResponse")]
        System.Threading.Tasks.Task<bool> DisconnectionAsync(int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNote", ReplyAction="http://tempuri.org/IService1/AddNoteResponse")]
        int AddNote(string title, string note, int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNote", ReplyAction="http://tempuri.org/IService1/AddNoteResponse")]
        System.Threading.Tasks.Task<int> AddNoteAsync(string title, string note, int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificationNote", ReplyAction="http://tempuri.org/IService1/ModificationNoteResponse")]
        bool ModificationNote(int identification, string Texte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificationNote", ReplyAction="http://tempuri.org/IService1/ModificationNoteResponse")]
        System.Threading.Tasks.Task<bool> ModificationNoteAsync(int identification, string Texte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveNote", ReplyAction="http://tempuri.org/IService1/RemoveNoteResponse")]
        bool RemoveNote(int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveNote", ReplyAction="http://tempuri.org/IService1/RemoveNoteResponse")]
        System.Threading.Tasks.Task<bool> RemoveNoteAsync(int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Notes", ReplyAction="http://tempuri.org/IService1/NotesResponse")]
        System.Collections.Generic.List<TestConsoleNote_Manager.TestServiceNote_Manager.Note> Notes(int identification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Notes", ReplyAction="http://tempuri.org/IService1/NotesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<TestConsoleNote_Manager.TestServiceNote_Manager.Note>> NotesAsync(int identification);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TestConsoleNote_Manager.TestServiceNote_Manager.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TestConsoleNote_Manager.TestServiceNote_Manager.IService1>, TestConsoleNote_Manager.TestServiceNote_Manager.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType GetDataUsingDataContract(TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType> GetDataUsingDataContractAsync(TestConsoleNote_Manager.TestServiceNote_Manager.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public int AddUser(string Pseudo, string Pass) {
            return base.Channel.AddUser(Pseudo, Pass);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string Pseudo, string Pass) {
            return base.Channel.AddUserAsync(Pseudo, Pass);
        }
        
        public int Connection(string Pseudo, string Pass) {
            return base.Channel.Connection(Pseudo, Pass);
        }
        
        public System.Threading.Tasks.Task<int> ConnectionAsync(string Pseudo, string Pass) {
            return base.Channel.ConnectionAsync(Pseudo, Pass);
        }
        
        public bool Disconnection(int identification) {
            return base.Channel.Disconnection(identification);
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectionAsync(int identification) {
            return base.Channel.DisconnectionAsync(identification);
        }
        
        public int AddNote(string title, string note, int identification) {
            return base.Channel.AddNote(title, note, identification);
        }
        
        public System.Threading.Tasks.Task<int> AddNoteAsync(string title, string note, int identification) {
            return base.Channel.AddNoteAsync(title, note, identification);
        }
        
        public bool ModificationNote(int identification, string Texte) {
            return base.Channel.ModificationNote(identification, Texte);
        }
        
        public System.Threading.Tasks.Task<bool> ModificationNoteAsync(int identification, string Texte) {
            return base.Channel.ModificationNoteAsync(identification, Texte);
        }
        
        public bool RemoveNote(int identification) {
            return base.Channel.RemoveNote(identification);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveNoteAsync(int identification) {
            return base.Channel.RemoveNoteAsync(identification);
        }
        
        public System.Collections.Generic.List<TestConsoleNote_Manager.TestServiceNote_Manager.Note> Notes(int identification) {
            return base.Channel.Notes(identification);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestConsoleNote_Manager.TestServiceNote_Manager.Note>> NotesAsync(int identification) {
            return base.Channel.NotesAsync(identification);
        }
    }
}
